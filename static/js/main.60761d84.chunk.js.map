{"version":3,"sources":["utils/dec2binPadded.ts","utils/zeroPadString.ts","utils/dec2bin.ts","utils/isPowerOf2.ts","Components/Bit/Bit.tsx","Components/ColorBinary/ColorBinary.tsx","utils/zeroOrOne.ts","utils/generateData.ts","utils/getCorrectParityBitValues.ts","App.tsx","utils/validateDataArray.ts","serviceWorker.ts","index.tsx"],"names":["dec2binPadded","number","length","string","right","zeroPadString","toString","isPowerOf2","num","Bit","getColorClassName","props","bitIndex","doubleError","errorIndex","getOpacityClassName","mousedOverBitIndex","this","absolutePositioned","bit","height","isCell","numRows","numColumns","onClickBit","onMouseOverBit","paddedBinaryLength","showBinary","width","colorClassName","opacityClassName","absolutePosition","position","left","top","Math","floor","className","onClick","e","onMouseOver","style","paddingBottom","React","Component","ColorBinary","chars","split","map","char","charIndex","key","zeroOrOne","generateData","numberBits","data","push","random","correctParityBitValues","powerOf2","parityBitIndex","pow","paritySum","compareBitIndex","getCorrectParityBitValues","forEach","value","reduce","accumulator","currentValue","App","calculations","memoize","ceil","sqrt","regularParityBits","filter","reverse","totalNumParityBits","parity","validateDataArray","state","efficiency","toFixed","log","generateNewData","setState","getMousedOverText","returnArray","element","index","getRegularParityBitsExplanation","sharedBitProps","Fragment","onMouseLeave","regularParityBit","swapIncorrectBit","disabled","switchBit","dataCopy","slice","bitHeight","bitWidth","id","color","newDimension","type","step","min","onChange","parseInt","target","parityBit","checked","title","src","frameBorder","allow","allowFullScreen","href","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.60761d84.chunk.js","sourcesContent":["import dec2bin from \"utils/dec2bin\"\nimport zeroPadString from \"utils/zeroPadString\"\n\n/**\n * given a number a desired length, return the zero padded binary string representation\n * @param  number input number\n * @param  length desired string length to zero pad to\n * @return        zero padded binary string\n */\nexport default function dec2binPadded(number:number, length:number) {\n  return zeroPadString(dec2bin(number), length)\n}\n","/**\n * given a string and desired length, zero pad the string if it is shorted than the desired length\n * @param  string input string\n * @param  length desired length\n * @param  right  if true, pad on the right, else pad on the left\n * @return        zero padded string\n */\nexport default function zeroPadString(string:string, length:number, right?:boolean) {\n  while(string.length < length) {\n    if(right) {\n      string = string + \"0\"\n    }\n    else {\n      string = \"0\" + string\n    }\n  }\n\n  return string\n}\n","/**\n * converts a base 10 number into it's binary string representation\n * taken from https://stackoverflow.com/questions/9939760/how-do-i-convert-an-integer-to-binary-in-javascript\n * @param  dec base 10 number\n * @return     binary string representation\n */\nexport default function dec2bin(dec:number) {\n  return (dec >>> 0).toString(2)\n}\n","/**\n * given a number, return true/false whether it is a power of 2, including 1, excluding 0\n * taken from https://stackoverflow.com/questions/1053582/how-does-this-bitwise-operation-check-for-a-power-of-2/1053594#1053594\n * @param  num input number\n * @return     true/false whether the number is a power of 2\n */\nexport default function isPowerOf2(num:number) {\n  if(num === 0) {\n    return false\n  }\n\n  return !(num & (num - 1)) //bitwise AND the number and one less than it\n}\n","import React from 'react';\n\nimport dec2binPadded from \"utils/dec2binPadded\"\nimport isPowerOf2 from \"utils/isPowerOf2\"\nimport \"./bit.scss\"\n\ninterface BitProps {\n  absolutePositioned:boolean,\n  bit: number,\n  bitIndex: number,\n  doubleError: boolean,\n  errorIndex: number,\n  height: number,\n  isCell: boolean,\n  mousedOverBitIndex:number,\n  numColumns: number,\n  numRows: number,\n  onClickBit: Function,\n  onMouseOverBit: Function,\n  paddedBinaryLength: number,\n  showBinary?: boolean,\n  width: number,\n}\n\ninterface AbsolutePosition {\n  position: \"absolute\" | \"relative\",\n  left?: string,\n  top?: string,\n}\n\nclass Bit extends React.Component<BitProps,{}> {\n  getColorClassName = () => {\n    const {\n      bitIndex,\n      doubleError,\n      errorIndex,\n    } = this.props\n\n    if(bitIndex === 0) { //if this is the 0th cell\n      return \"colorZerothBit\"\n    }\n    else if(doubleError===false && errorIndex===bitIndex) {\n      return \"colorErrorBit\"\n    }\n    else if(isPowerOf2(bitIndex)) { //if this is a parity bit\n      // if( //if this is a parity bit for the moused over cell\n      //   mousedOverBitIndex>=0\n      //   && bitIndex & mousedOverBitIndex\n      // ) {\n      //   return \"relatedParityBit\"\n      // }\n\n      return \"colorParityBit\"\n    }\n    // else if( //if the moused over cell is a parity bit for this cell\n    //   mousedOverBitIndex>=0 //there is a cell being moused over\n    //   && isPowerOf2(mousedOverBitIndex) //the moused over cell is a parity bit\n    //   && bitIndex & mousedOverBitIndex //the ANDed bitwise operation produces a number\n    // ) {\n    //   return \"colorDataBit\" //return \"coveredByParityBit\"\n    // }\n    // else if(bitIndex === mousedOverBitIndex) { //if this is the cell being moused over\n    //   return \"colorMousedOver\"\n    // }\n\n    return \"colorDataBit\"\n  }\n\n  getOpacityClassName = () => {\n    const {\n      bitIndex,\n      mousedOverBitIndex,\n    } = this.props\n\n    if(bitIndex === 0) { //if this is the 0th cell\n      if(mousedOverBitIndex > 0) {\n        return \"opacityDimmed\"\n      }\n      return \"\"\n    }\n    else if( //if this is a parity bit for the moused over cell\n      isPowerOf2(bitIndex)\n      && mousedOverBitIndex>=0\n      && bitIndex & mousedOverBitIndex\n    ) {\n      return \"\"\n    }\n    else if( //if the moused over cell is a parity bit for this cell\n      mousedOverBitIndex>=0 //there is a cell being moused over\n      && isPowerOf2(mousedOverBitIndex) //the moused over cell is a parity bit\n      && bitIndex & mousedOverBitIndex //the ANDed bitwise operation produces a number\n    ) {\n      return \"\"\n    }\n    else if(\n      mousedOverBitIndex >= 0\n      && mousedOverBitIndex !== bitIndex\n    ) {\n      return \"opacityDimmed\"\n    }\n\n    return \"\"\n  }\n\n  render() {\n    const {\n      absolutePositioned,\n      bit,\n      bitIndex,\n      height,\n      isCell,\n      numRows,\n      numColumns,\n      onClickBit,\n      onMouseOverBit,\n      paddedBinaryLength,\n      showBinary,\n      width,\n    } = this.props\n\n    const colorClassName = this.getColorClassName()\n    const opacityClassName = this.getOpacityClassName()\n\n    if(isCell) {\n      const absolutePosition:AbsolutePosition = {position: \"relative\"}\n      if(absolutePositioned) {\n        absolutePosition.position = \"absolute\"\n        absolutePosition.left = (100 * (bitIndex % numColumns) / numColumns).toString()+\"%\" //TODO memoize this\n        absolutePosition.top = (100 * Math.floor(bitIndex/numColumns) / numRows).toString()+\"%\"\n      }\n\n      return (\n        <span\n          className={`bit cell ${colorClassName} ${opacityClassName}` }\n          onClick={e => onClickBit(bitIndex)}\n          onMouseOver={e => onMouseOverBit(bitIndex)}\n          style={{\n            height: height - 2,\n            width: width - 2,\n            ...absolutePosition,\n          }}\n        >\n          <div className=\"value\" style={{\n            paddingBottom: showBinary ? \"0.25em\" : \"0\"\n          }}>{bit}</div>\n          <div className=\"binaryBitIndex\">{showBinary ? dec2binPadded(bitIndex, paddedBinaryLength) : null}</div>\n          <div className=\"bitIndex\">{bitIndex}</div>\n        </span>\n      )\n    }\n\n    return (\n      <span\n        className={`bit messageBit ${colorClassName} ${opacityClassName}`}\n        onClick={e => onClickBit(bitIndex)}\n        onMouseOver={e => onMouseOverBit(bitIndex)}\n      >\n        {bit}\n      </span>\n    )\n  }\n}\n\nexport default Bit\n","import React from 'react'\n\nimport dec2binPadded from \"utils/dec2binPadded\"\nimport \"./colorBinary.scss\"\n\ninterface ColorBinaryProps {\n  number: number,\n  paddedBinaryLength: number,\n}\n\nconst ColorBinary = (props:ColorBinaryProps) => {\n  const chars = dec2binPadded(props.number, props.paddedBinaryLength).split(\"\")\n\n  return (\n    <span>{chars.map((char, charIndex) =>\n      <span className={\"colorBinary\" + char} key={charIndex}>{char}</span>\n    )}</span>\n  )\n}\n\nexport default ColorBinary\n","/**\n * return 1 if the number is greater than 0, else return 0\n * @param  number input number\n * @return        0 or 1\n */\nexport default function zeroOrOne(number:number) {\n  return number>0 ? 1 : 0\n}\n","import getCorrectParityBitValues from \"utils/getCorrectParityBitValues\"\n\n/**\n * given a number of bits, generate a valid data array\n * @param  numberBits number of bits\n * @return            2d data array\n */\nexport default function generateData(numberBits:number):number[] {\n  const data = [0] //set the first bit to zero for now\n\n  while(data.length < numberBits) { //while we do not have enough rows\n    data.push(Math.random()>0.5 ? 1 : 0) //push the bit\n  }\n\n  //set the value of each parity bit\n  getCorrectParityBitValues(data).forEach((value, powerOf2) => {\n    data[Math.pow(2, powerOf2)] = value //set the parity bit\n  })\n\n  //set the first bit to the parity of the whole data array\n  data[0] = data.reduce((accumulator, currentValue) => accumulator^=currentValue, 0)\n\n  return data\n}\n","import zeroOrOne from \"utils/zeroOrOne\"\n\n/**\n * given an array of data, return the correct parity bit values as an array, where the index n matches the 2^n parity bit\n * @param  data data array\n * @return      array of parity bit values\n */\nexport default function getCorrectParityBitValues(data:number[]):number[] {\n  const correctParityBitValues = []\n\n  let powerOf2 = 0\n  let parityBitIndex = Math.pow(2, powerOf2)\n  const length = data.length\n\n  while(parityBitIndex < length) { //while the parity bit is still in the data array\n    //iterate through all subsequent bits\n    let paritySum = 0\n    for(let compareBitIndex=parityBitIndex+1; compareBitIndex<length; ++compareBitIndex) {\n      if(compareBitIndex & parityBitIndex) { //if this is a parity bit for this compare bit\n        paritySum += zeroOrOne(data[compareBitIndex]) //increment by the bit value\n      }\n    }\n\n    correctParityBitValues.push(paritySum%2) //push the correct value\n\n    ++powerOf2 //increment to the next power of 2\n    parityBitIndex = Math.pow(2, powerOf2) //move to the next parity bit\n  }\n\n  return correctParityBitValues\n}\n","import React from 'react';\nimport memoize from 'memoize-one'\n\nimport Bit from \"Components/Bit/Bit\"\nimport ColorBinary from \"Components/ColorBinary/ColorBinary\"\nimport dec2binPadded from \"utils/dec2binPadded\"\nimport generateData from \"utils/generateData\"\nimport isPowerOf2 from \"utils/isPowerOf2\"\nimport validateDataArray from \"utils/validateDataArray\"\nimport './App.scss';\n\ninterface AppState {\n  bitHeight: number,\n  bitWidth: number,\n  data: number[],\n  mousedOverBitIndex: number,\n  numberBits: number,\n  showBinary: boolean,\n}\n\ninterface RegularParityBit {\n  bit: number,\n  bitIndex: number,\n}\n\ninterface SharedBitProps {\n  doubleError: boolean,\n  errorIndex: number,\n  height: number,\n  mousedOverBitIndex: number,\n  numColumns: number,\n  numRows: number,\n  onClickBit: Function,\n  onMouseOverBit: Function,\n  paddedBinaryLength: number,\n  width: number,\n}\n\nconst MAX_ROW_BIT_SHOW_BINARY = 6\n\nclass App extends React.Component<{},AppState> {\n  constructor(props:{}) {\n    super(props)\n\n    const numberBits = 16\n\n    this.state = {\n      bitHeight: 100,\n      bitWidth: 100,\n      data: generateData(numberBits),\n      mousedOverBitIndex: -1,\n      numberBits,\n      showBinary: true,\n    }\n  }\n\n  calculations = memoize(\n    (data:number[]) => {\n      const numColumns = Math.ceil(Math.sqrt(data.length))\n\n      //pull out the regular parity bits\n      const regularParityBits:RegularParityBit[] = data.filter(\n        (bit, bitIndex) => isPowerOf2(bitIndex)\n      ).map((bit, powerOf2) => ({\n        bit, //track the bit value\n        bitIndex: Math.pow(2, powerOf2), //track the original bit index\n      })).reverse() //reverse them so we can put them in binary order\n      const totalNumParityBits = regularParityBits.length + 1\n\n      return {\n        ...validateDataArray(this.state.data), //doubleError, errorIndex, parity\n        efficiency: (100 * (data.length - totalNumParityBits) / data.length).toFixed(2),\n        numColumns,\n        numRows: Math.ceil(data.length/numColumns),\n        paddedBinaryLength: Math.ceil(Math.log(data.length)/Math.log(2)),\n        regularParityBits,\n        totalNumParityBits,\n      }\n    }\n  )\n\n  generateNewData = (numberBits: number) => this.setState({\n    data: generateData(numberBits),\n    numberBits,\n  })\n\n  getMousedOverText = (paddedBinaryLength:number) => {\n    const {\n      mousedOverBitIndex,\n    } = this.state\n\n    if(this.state.mousedOverBitIndex >= 0) { //if there is a bit being hovered over\n      const returnArray = [\n        <span>\n          You are hovering over bit {mousedOverBitIndex}\n          <span className=\"floatRight\">(binary <ColorBinary number={mousedOverBitIndex} paddedBinaryLength={paddedBinaryLength}/>)</span>\n        </span>,\n        <br/>\n      ]\n\n      if(mousedOverBitIndex === 0) {\n        returnArray.push(\n          <span>\n            It tracks the parity of the rest of the message. Including this bit, the overall parity of the message should be 0 (even). If the other parity bits detect an error AND the parity of the whole message is odd, we assume there is a 1-bit error. If the other parity bits detect an error AND the parity of the whole message is even, we assume there is a 2-bit error.\n          </span>\n        )\n      }\n      else if(isPowerOf2(mousedOverBitIndex)) { //the moused over bit is a parity bit\n        returnArray.push(\n          <span>It tracks all bits with a 1 in binary position {Math.log(mousedOverBitIndex)/Math.log(2)}</span>\n        )\n      }\n      else { //else this is a regular bit. find it's parity bits\n        this.state.data.forEach((bit, bitIndex) => {\n          if(\n            bitIndex !== mousedOverBitIndex //ignore the bit we are currently moused over\n            && isPowerOf2(bitIndex) //if this is a parity bit\n            && bitIndex & mousedOverBitIndex //this bit is a parity bit for our moused over bit\n          ) {\n            returnArray.push(\n              <span>\n                It is tracked by parity bit {bitIndex}\n                <span className=\"floatRight\">(binary <ColorBinary number={bitIndex} paddedBinaryLength={paddedBinaryLength}/>)</span>\n              </span>\n            )\n          }\n        })\n      }\n\n      return returnArray.map((element, index) => <div key={index}>{element}</div>)\n    }\n\n    return \"Hover over a bit to learn more!\"\n  }\n\n  getRegularParityBitsExplanation = (\n    doubleError: boolean,\n    errorIndex: number,\n    paddedBinaryLength: number,\n    regularParityBits: RegularParityBit[],\n    sharedBitProps: SharedBitProps,\n  ) => {\n    if(doubleError) { //if there is a 2-bit error\n      return (\n        <React.Fragment>\n          <br/>\n          <div className=\"colorErrorBit errorDetected\">Double Error Detected!</div>\n          <div>This is what the values of the parity bits should be. Since the overall parity of the message is odd, this means that there is a 2-bit error!</div>\n          <div className=\"regularParityBitsContainer\" onMouseLeave={e => this.setState({mousedOverBitIndex:-1})}>\n            {regularParityBits.map((regularParityBit) =>\n              <Bit\n                key={regularParityBit.bitIndex}\n\n                absolutePositioned={false}\n                bit={regularParityBit.bitIndex&errorIndex ? 1 : 0}\n                bitIndex={regularParityBit.bitIndex}\n                isCell={true}\n                showBinary={regularParityBits.length <= MAX_ROW_BIT_SHOW_BINARY}\n\n                {...sharedBitProps}\n              />\n            )}\n          </div>\n        </React.Fragment>\n      )\n    }\n    else if(errorIndex > 0) { //else if there is a single bit error\n      return (\n        <React.Fragment>\n          <br/>\n          <div className=\"colorErrorBit errorDetected\">Single Error to be Corrected!</div>\n          <div>This is what the values of the parity bits should be. Since the overall parity of the message is odd, this means that there is a 1-bit error in binary position {dec2binPadded(errorIndex, paddedBinaryLength)}, ie position {errorIndex}</div>\n          <div className=\"regularParityBitsContainer\" onMouseLeave={e => this.setState({mousedOverBitIndex:-1})}>\n            {regularParityBits.map((regularParityBit) =>\n              <Bit\n                key={regularParityBit.bitIndex}\n\n                absolutePositioned={false}\n                bit={regularParityBit.bitIndex&errorIndex ? 1 : 0}\n                bitIndex={regularParityBit.bitIndex}\n                isCell={true}\n                showBinary={regularParityBits.length <= MAX_ROW_BIT_SHOW_BINARY}\n\n                {...sharedBitProps}\n              />\n            )}\n          </div>\n\n          <br/>\n\n          <div>\n            <button\n              onClick={e => this.swapIncorrectBit(doubleError, errorIndex)}\n              disabled={errorIndex===0 || doubleError}\n            >\n              Swap Incorrect Bit ({errorIndex})\n            </button>\n          </div>\n        </React.Fragment>\n      )\n    }\n  }\n\n  onMouseOverBit = (bitIndex: number) => this.setState({mousedOverBitIndex:bitIndex})\n\n  swapIncorrectBit = (doubleError:boolean, errorIndex: number) => {\n    if(errorIndex>0 && doubleError===false) { //if this is a 1-bit error to swap\n      this.switchBit(errorIndex)\n    }\n  }\n\n  switchBit = (bitIndex: number) => {\n    const dataCopy = this.state.data.slice()\n    dataCopy[bitIndex] = dataCopy[bitIndex]>0 ? 0 : 1 //switch the bit\n    this.setState({data: dataCopy})\n  }\n\n\n\n  render() {\n    const {\n      bitHeight,\n      bitWidth,\n      data,\n      mousedOverBitIndex,\n      showBinary,\n    } = this.state\n\n    const {\n      doubleError,\n      efficiency,\n      errorIndex,\n      numColumns,\n      numRows,\n      paddedBinaryLength,\n      regularParityBits,\n      totalNumParityBits,\n      parity,\n    } = this.calculations(data)\n\n    const sharedBitProps:SharedBitProps = {\n      doubleError,\n      errorIndex,\n      height: bitHeight,\n      mousedOverBitIndex,\n      numColumns,\n      numRows,\n      onClickBit: this.switchBit,\n      onMouseOverBit: this.onMouseOverBit,\n      paddedBinaryLength,\n      width: bitWidth,\n    }\n\n    return (\n      <div id=\"App\">\n        <header>\n          <h1>Hamming Code</h1>\n          <p><i>Single Error Correction, Double Error Detection</i></p>\n          <p>Computers represent data digitally as 1s and 0s, called 'bits'. Sometimes these bits are mistakenly swapped, for example: a scratched CD or a message garbled in transit between computers. Invented in 1950 by Richard Hamming, Hamming Code can correct 1-bit errors and detect 2-bit errors, making data transfer and saving more robust.</p>\n          <p>A <span className=\"colorZerothBit\" style={{color: \"black\"}}>&nbsp;<b>parity bit</b>&nbsp;</span> is a single bit that tracks whether the number of 1's is odd or even. If the number of 1's is odd, the parity bit is 1; if the number of 1's is even, the parity bit is 0. Hamming cleverly arranged parity bits to track certain rows or columns, so that we will be able to correct 1-bit errors and, with an extra step, detect 2-bit errors.</p>\n        </header>\n\n        <section id=\"content\">\n          <div id=\"sidebar\">\n            <div>\n              <div>\n                <b>Generate new data:</b>\n              </div>\n\n              <br/>\n\n              <div>\n                <span>\n                  {[2,4,8,16].map(newDimension =>\n                    <button\n                      key={newDimension}\n                      className=\"grouped\"\n                      onClick={e => this.generateNewData(newDimension*newDimension)}\n                    >\n                      {newDimension*newDimension}\n                    </button>\n                  )}\n                </span> | <input id=\"customNumberBits\" type=\"number\" step=\"1\" min=\"1\" value={this.state.numberBits} onChange={e => this.generateNewData(parseInt(e.target.value))}/> bits\n              </div>\n            </div>\n\n            <hr/>\n\n            <b>Efficiency</b>\n            <p>Since we have some parity bits, not all of the bits can be used to transfer data. Our current efficiency is:</p>\n            <div>{data.length - totalNumParityBits} data bits /{data.length} total = <b>{efficiency}%</b></div>\n\n            <hr/>\n\n            <div><b>Overall Message Parity:</b> {parity} ({parity===1 ? \"odd\" : \"even\"})</div>\n\n            <br/>\n\n            <div><b>Current values of the regular parity bits</b></div>\n            <div className=\"regularParityBitsContainer\" onMouseLeave={e => this.setState({mousedOverBitIndex:-1})}>\n              {regularParityBits.map((parityBit) =>\n                <Bit\n                  key={parityBit.bitIndex}\n\n                  absolutePositioned={false}\n                  bit={parityBit.bit}\n                  bitIndex={parityBit.bitIndex}\n                  isCell={true}\n                  showBinary={regularParityBits.length <= MAX_ROW_BIT_SHOW_BINARY}\n\n                  {...sharedBitProps}\n                />\n              )}\n            </div>\n\n            {this.getRegularParityBitsExplanation(doubleError, errorIndex, paddedBinaryLength, regularParityBits, sharedBitProps)}\n\n            <hr/>\n\n            <div>{this.getMousedOverText(paddedBinaryLength)}</div>\n          </div>\n\n\n          <div id=\"interactiveContainer\">\n            <div id=\"clickSwapMessage\">\n              Click on a bit to swap its value!\n\n              <span id=\"toggleShowBinary\">\n                Show Binary Positions <input type=\"checkbox\" checked={showBinary} onChange={e => this.setState({showBinary:!showBinary})}/>\n              </span>\n            </div>\n\n            <div id=\"dataContainer\">\n              <div id=\"cellsContainer\" onMouseLeave={e => this.setState({mousedOverBitIndex:-1})} style={{\n                height: bitHeight * numRows,\n                width: bitWidth * numColumns,\n              }}>\n                {data.map((bit, bitIndex) =>\n                  <Bit\n                    key={bitIndex}\n\n                    absolutePositioned={true}\n                    bit={bit}\n                    bitIndex={bitIndex}\n                    isCell={true}\n                    showBinary={showBinary}\n\n                    {...sharedBitProps}\n                  />\n                )}\n              </div>\n\n              <br/>\n\n              <br/>\n\n              <div>\n                <span id=\"rawMessageContainer\" onMouseLeave={e => this.setState({mousedOverBitIndex:-1})}>\n                  {data.map((bit, bitIndex) =>\n                    <Bit\n                      key={bitIndex}\n\n                      absolutePositioned={false}\n                      bit={bit}\n                      bitIndex={bitIndex}\n                      isCell={false}\n\n                      {...sharedBitProps}\n                    />\n                  )}\n                </span>\n              </div>\n            </div>\n\n            <div id=\"legend\">\n              <span className=\"legendKey\"><span className=\"legendSquare colorZerothBit\"></span> Overall Parity Bit</span>\n              <span className=\"legendKey\"><span className=\"legendSquare colorParityBit\"></span> Regular Parity Bit</span>\n              <span className=\"legendKey\"><span className=\"legendSquare colorDataBit\"></span> Data Bit</span>\n              <span className=\"legendKey\"><span className=\"legendSquare colorErrorBit\"></span> Error Bit</span>\n            </div>\n          </div>\n        </section>\n\n        <section id=\"video\">\n          <h2>3Blue1Brown's Explanation</h2>\n          <iframe title=\"3blue1brown\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/X8jsijhllIA\" frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n        </section>\n\n        <section>\n          <h3>How to Arrange the Parity Bits</h3>\n\n          <div>In everyday base-10 counting, powers-of-10 (1, 10, 100, etc...) are written with 0s and a single 1. Similarly, in binary, powers-of-2 (1, 2, 4, 8, 16, etc...) are written with 0s and a single 1 (0001, 0010, 0100, 1000, etc...). In a message, the bits in a powers-of-2 position will be our <span className=\"colorZerothBit\" style={{color: \"black\"}}>&nbsp;<b>parity bits</b>&nbsp;</span>. These parity bits track the parity of the other bits in the message whose position have a 1 in the same place. If one of bits is flipped, the parity will be wrong. If you select a data length that makes a square, you can visually see that each parity bit tracks certain rows and columns, splitting the message in halves to efficiently locate where the error is, like a game of \"20 questions\" or like a binary search. After calculating what the parity bits should equal, the parity bits point to the location of the error!</div>\n        </section>\n\n        <section>\n          <h3>Single Error Correction, Double Error Detection</h3>\n\n          <div>\n            Hamming Code by itself can correct 1-bit errors, but will become confused when there are 2-bit errors. Single Error Correction, Double Error Detection (SECDED) extends Hamming Code with an additional parity bit (ie the first dark green parity bit). This bit tracks the parity of the whole message, so that we can detect 2-bit errors (without being able to correct them). With this additional parity bit, the overall parity of the message should be even. If there is a 1-bit error, the regular parity bits will detect an error and the overall parity of the message is 1; we can assume there is a 1-bit error. If there is a 2-bit error, the regular parity bits will detect an error BUT the overall parity of the message is 0; we have detected a double error.\n          </div>\n        </section>\n\n        <section>\n          <h3>Efficiency and Limitations</h3>\n\n          <p>\n            Of course, by having some parity bits, not all bits can be used to transmit data. In this case, we need {totalNumParityBits} parity bits to track {data.length - totalNumParityBits} bits of data for an overall efficiency of {efficiency}%. Longer messages loosely correlate with higher efficiency. The longer the message, however, the more likely the chance of bit errors, rendering Hamming Code insufficient, since it cannot detect 3 or more errors.\n          </p>\n\n          <p>From Wikiepdia:</p>\n          <p>\n            <i>\"If the decoder does not attempt to correct errors, it can reliably detect triple bit errors. If the decoder does correct errors, some triple errors will be mistaken for single errors and \"corrected\" to the wrong value. Error correction is therefore a trade-off between certainty (the ability to reliably detect triple bit errors) and resiliency (the ability to keep functioning in the face of single bit errors).\"</i>\n          </p>\n        </section>\n\n        <footer>\n          <p>Thank you to 3Blue1Brown for the inspiration and explanation! <a href=\"https://www.3blue1brown.com/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.3blue1brown.com/</a></p>\n\n          <p>\n            Read more about Hamming Code: <a href=\"https://en.wikipedia.org/wiki/Hamming_code\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Hamming_code</a>\n          </p>\n\n          <p>\n            Read more about error-correcting code: <a href=\"https://en.wikipedia.org/wiki/Linear_code\" target=\"_blank\" rel=\"noopener noreferrer\">https://en.wikipedia.org/wiki/Linear_code</a>\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","import zeroOrOne from \"utils/zeroOrOne\"\n\n/**\n * given a data array, return whether a double error is detected, the error index, and the overall parity\n * @param  data data array\n * @return      an object that says whether a double error is detected, the error index, and the overall parity\n */\nexport default function validateDataArray(\n  data:number[]\n):{\n  doubleError: boolean,\n  errorIndex: number,\n  parity: number,\n} {\n  let errorIndex = 0\n  let parity = 0\n\n  data.forEach((bit, bitIndex) => {\n    const value = zeroOrOne(bit)\n    if(value === 1) { //if this bit is one\n      errorIndex ^= bitIndex //XOR the bit index\n    }\n\n    parity ^= value //get the parity of the data (this includes the first overall parity bit)\n  })\n\n  return {\n    doubleError: parity===0 && errorIndex > 0, //if the parity is correct AND we have an error, this means we detected a 2 bit error\n    errorIndex,\n    parity,\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}